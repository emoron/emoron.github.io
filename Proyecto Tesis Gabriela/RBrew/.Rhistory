source('~/Google Drive/resample-calendar-3.R', echo=TRUE)
write(json,file="lista.json")
json
source('~/Google Drive/resample-calendar-3.R', echo=TRUE)
library(plyr)
source('~/Google Drive/resample-calendar-3.R', echo=TRUE)
write(json,file="lista.json")
4500 /70
a <- c(150,100)
a + 65
# first try Windows CP1252, although that's almost surely not supported on Mac:
Sys.setlocale("LC_ALL", "pt_PT.1252") # Make sure not to omit the `"LC_ALL",` first argument, it will fail.
Sys.setlocale("LC_ALL", "pt_PT.CP1252") # the name might need to be 'CP1252'
# next try IS08859-1(/'latin1'), this works for me:
Sys.setlocale("LC_ALL", "pt_PT.ISO8859-1")
library(data.table)
#library(reshape)
library(RCurl)
library(plyr)
exportTables <- function(x){
salida <- read.csv(textConnection(x), header = TRUE,fileEncoding = "UTF-8")
return(salida)
}
toJSONarray <- function(dtf){
clnms <- colnames(dtf)
name.value <- function(i){
quote <- '';
if(!class(dtf[, i]) %in% c('numeric', 'integer')){
quote <- '"';
}
paste('"', i, '" : ', quote, dtf[,i], quote, sep='')
}
objs <- apply(sapply(clnms, name.value), 1, function(x){paste(x, collapse=', ')})
objs <- paste('{', objs, '}')
res <- paste('[', paste(objs, collapse=', '), ']')
return(res)
}
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF[r,] <- newrow
existingDF
}
#Leer el archivo desde Google Docs
google_docs="https://docs.google.com/spreadsheets/d/";
doc_id ="1dYRaHDHZB4P-5HYkdi0Kst7LFoP2eJUm7y_sIZo6Wf0";
doc_opts="/export?gid=";
formato = "&format=csv"
#cars_csv = getURL(paste(google_docs, cars_key, sep = ""))
#gids = c("1271806036","1097022579","1442796562","609821330","1342824950")
gids=c("769876007","1900372071","1259568640","917431173","2041946796")
hojas = lapply(gids, function(x) { return (paste(google_docs,doc_id,doc_opts,x,formato,sep="") )})
hojas
archivos = lapply(hojas[1],getURL)
tablas <- lapply(archivos,exportTables)
## Convierto con reshape
salida = data.frame()
dias <- c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES")
for ( i in seq(1:5)){
valor <- as.data.frame(tablas[i])
z <- melt(valor,"HORA")
z <- subset(z, value != "")
z$dia = dias[i]
salida <- rbind(salida,z)
}
salida = data.frame()
dias <- c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES")
for ( i in seq(1:5)){
valor <- as.data.frame(tablas[i])
z <- melt(valor,"HORARIO")
z <- subset(z, value != "")
z$dia = dias[i]
salida <- rbind(salida,z)
}
salida = data.frame()
dias <- c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES")
for ( i in seq(1:5)){
valor <- as.data.frame(tablas[i])
z <- melt(valor,"HORARIO")
z <- subset(z, value != "")
z$dia = dias[i]
salida <- rbind(salida,z)
}
salida = data.frame()
dias <- c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES")
for ( i in seq(1:5)){
valor <- as.data.frame(tablas[i])
z <- melt(valor,"HORARIO")
z <- subset(z, value != "")
z$dia = dias[i]
salida <- rbind(salida,z)
}
tablas
archivos = lapply(hojas[1],getURL)
hojas[1]
getURL("https://docs.google.com/spreadsheets/d/1dYRaHDHZB4P-5HYkdi0Kst7LFoP2eJUm7y_sIZo6Wf0/export?gid=769876007&format=csv")
getURL("https://docs.google.com/spreadsheets/d/1dYRaHDHZB4P-5HYkdi0Kst7LFoP2eJUm7y_sIZo6Wf0/export?gid=769876007&format=csv")
?
getURL()
q
hojas[1]
archivo  <- read.csv(file = "horarios1.csv", header = TRUE,fileEncoding = "UTF-8")
View(archivo)
salida = data.frame()
dias <- c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES")
tablas  <- read.csv(file = "horarios1.csv", header = TRUE,fileEncoding = "UTF-8")
salida = data.frame()
dias <- c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES")
for ( i in seq(1:5)){
valor <- as.data.frame(tablas[i])
z <- melt(valor,"HORARIO")
z <- subset(z, value != "")
z$dia = dias[i]
salida <- rbind(salida,z)
}
z <- melt(valor,"HORARIO")
z
valor
valor <- as.data.frame(tablas[1])
# Modificacion para Cursos del FCFM
# first try Windows CP1252, although that's almost surely not supported on Mac:
Sys.setlocale("LC_ALL", "pt_PT.1252") # Make sure not to omit the `"LC_ALL",` first argument, it will fail.
Sys.setlocale("LC_ALL", "pt_PT.CP1252") # the name might need to be 'CP1252'
# next try IS08859-1(/'latin1'), this works for me:
Sys.setlocale("LC_ALL", "pt_PT.ISO8859-1")
library(data.table)
#library(reshape)
library(RCurl)
library(plyr)
exportTables <- function(x){
salida <- read.csv(textConnection(x), header = TRUE,fileEncoding = "UTF-8")
return(salida)
}
toJSONarray <- function(dtf){
clnms <- colnames(dtf)
name.value <- function(i){
quote <- '';
if(!class(dtf[, i]) %in% c('numeric', 'integer')){
quote <- '"';
}
paste('"', i, '" : ', quote, dtf[,i], quote, sep='')
}
objs <- apply(sapply(clnms, name.value), 1, function(x){paste(x, collapse=', ')})
objs <- paste('{', objs, '}')
res <- paste('[', paste(objs, collapse=', '), ']')
return(res)
}
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF[r,] <- newrow
existingDF
}
tableInvert <- function(x){
salida = data.frame()
dias <- c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES")
for ( i in seq(1:5)){
valor <- as.data.frame(x[i])
z <- melt(valor,"HORARIO")
z <- subset(z, value != "")
z$dia = dias[i]
salida <- rbind(salida,z)
}
return(salida)
}
google_docs="https://docs.google.com/spreadsheets/d/1_ZZPoRUdzoFmLR_BebqzPFIxo4mOB1Qe6p6mVN0BosU/pub?gid=";
formato = "&single=true&output=csv"
gids = c("1271806036","1097022579","1442796562","609821330","1342824950")
hojas1 = lapply(gids, function(x) { return (paste(google_docs,as.character(x),formato,sep="") )})
archivos1 = lapply(hojas1,getURL)
tablas1 <- lapply(archivos1,exportTables)
salida1 <- tableInvert(tablas1)
tableInvert <- function(x){
salida = data.frame()
dias <- c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES")
for ( i in seq(1:5)){
valor <- as.data.frame(x[i])
z <- melt(valor,"HORARIO")
z <- subset(z, value != "")
z$dia = dias[i]
salida <- rbind(salida,z)
}
return(salida)
}
salida1 <- tableInvert(tablas1)
salida1 <- tableInvert(tablas1)
tablas1
tableInvert <- function(x){
salida = data.frame()
dias <- c("LUNES","MARTES","MIERCOLES","JUEVES","VIERNES")
for ( i in seq(1:5)){
valor <- as.data.frame(x[i])
z <- melt(valor,"HORA")
z <- subset(z, value != "")
z$dia = dias[i]
salida <- rbind(salida,z)
}
return(salida)
}
salida1 <- tableInvert(tablas1)
View(salida1)
salida <- data.frame()
salida <- rbind(salida,salida1)
salida<- rename(salida, c("variable"="salon", "value" = "materia"))
View(salida1)
View(salida)
dt2 <-dt[,.(duracion = length(horario),horario = min(horario)),by=.(materia,salon,dia)]
salones = c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","")
for(i in 1:16){
dt2[salon == paste("X",as.character(i),sep=""), salon := as.character(i)]
#dt[horario == paste("H",as.character(i),sep=""),horario := as.numeric(horas[i])]
}
salida2<- dt2
salida3 <- as.data.frame.matrix(salida2)
json <- toJSONarray(salida3)
write.csv(salida,file="test.csv",row.names = FALSE)
google_docs="https://docs.google.com/spreadsheets/d/1_ZZPoRUdzoFmLR_BebqzPFIxo4mOB1Qe6p6mVN0BosU/pub?gid=";
formato = "&single=true&output=csv"
gids = c("1271806036","1097022579","1442796562","609821330","1342824950")
hojas1 = lapply(gids, function(x) { return (paste(google_docs,as.character(x),formato,sep="") )})
archivos1 = lapply(hojas1,getURL)
tablas1 <- lapply(archivos1,exportTables)
salida1 <- tableInvert(tablas1)
salida <- data.frame()
salida <- rbind(salida,salida1)
salida<- rename(salida, c("variable"="salon", "value" = "materia"))
salidadt = data.table(salida)
dt2 <-dt[,.(duracion = length(horario),horario = min(horario)),by=.(materia,salon,dia)]
salones = c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","")
for(i in 1:16){
dt2[salon == paste("X",as.character(i),sep=""), salon := as.character(i)]
#dt[horario == paste("H",as.character(i),sep=""),horario := as.numeric(horas[i])]
}
salida2<- dt2
salida3 <- as.data.frame.matrix(salida2)
json <- toJSONarray(salida3)
View(salida2)
archivo = readLines("names.txt")
fieldset=strsplit(archivo, split="\s")
fieldset=strsplit(archivo, split="")
fieldset
fieldset=strsplit(archivo, split=" ")
fieldset
archivos
archivo
1..3
1:3
(1:3)
(1:3) *c(1,2)
(1:3) *c(1:2)
(1:3) *c(1:3)
(1:3) *c(1,2,3)
capColor = c(huey = "red", duey = "blue", louie = "green")
L <- list(x = c(1:5), y = c("a", "b", "c"),z=capColor)
L
L[c(1,3)]
L$z
L[["z"]]
Died.At <- c(22,40,72,41)
Writer.At <- c(16, 18, 36, 36)
First.Name <- c("John", "Edgar", "Walt", "Jane")
Second.Name <- c("Doe", "Poe", "Whitman", "Austen")
Sex <- c("MALE", "MALE", "MALE", "FEMALE")
Date.Of.Death <- c("2015-05-10", "1849-10-07", "1892-03-26","1817-07-18") - Read more at: http://scl.io/KBYDSxie#gs.qKGXzX0
Date.Of.Death <- c("2015-05-10", "1849-10-07", "1892-03-26","1817-07-18")
- Read more at: http://scl.io/KBYDSxie#gs.qKGXzX0
Date.Of.Death <- c("2015-05-10", "1849-10-07", "1892-03-26","1817-07-18")
writers_df <- data.frame(Died.At, Writer.At, First.Name, Second.Name, Sex, Date.Of.Death) - Read more at: http://scl.io/KBYDSxie#gs.qKGXzX0
writers_df <- data.frame(Died.At, Writer.At, First.Name, Second.Name, Sex, Date.Of.Death)
View(writers_df)
names(writers_df)
names(writers_df) <- c("Age.At.Death", "Age.As.Writer", "Name", "Surname", "Gender", "Death")
Subject <- c(1,2)
Gender <- c("M", "F")
Read <- c(10, 7)
Write <-c(8, 4)
Listen <- c(7, 6)
observations_wide <- data.frame(Subject, Gender, Read, Write, Listen)
observations_wide
long_format <- stack(observations_wide,
select=c(Read,
Write,
Listen))
long_format
Subject <- c(1,2,1,2,2,1)
Gender <- c("M", "F", "M", "F", "F","M")
Test <- c("Read", "Write", "Write", "Listen", "Read", "Listen")
Result <- c(10, 4, 8, 6, 7, 7)
observations_long <- data.frame(Subject, Gender, Test, Result)
observations_long
wide_format <- unstack(observations_long,
Result ~ Test)
wide_format
library(devtools)
library(githubinstall)
install.packages("devtools")
install.packages("devtools")
install.packages(c("wordcloud","tm"),repos="http://cran.r-project.org")
install.packages(c("wordcloud","tm"),repos="http://cran.r-project.org")
install.packages("~/Desktop/slam_0.1-38.tar.gz", repos = NULL, type = "source")
install.packages("tm")
credit <- read.csv("~/Google Drive/credit.csv")
View(credit)
table(credit$checking_balance)
summary(credit$months_loan_duration)
summary(credit$amount)
table(credit$default)
set.seed(123)
train <- sample(1000,900)
credit-train <- credit[train,]
credit_train <- credit[train,]
credit_test <- credit[-train,]
prop.table(table(credit_train$default))
install.packages("C50")
library(C50)
credit_model <- C5.0(credit_train[-17], credit_train$default)
table(credit$default)
View(credit)
credit <- read.csv("~/Machine-Learning-with-R-datasets/credit.csv", stringsAsFactors=FALSE)
View(credit)
credit$default[1:900=="1",] = NO
credit$default[1:900=="1",] = "NO"
credit$default[1:800=="1",] = "NO"
credit$default <- factor(credit$default, levels = c(1,2), labels = c("NO", "YES"))
View(credit)
table(credit$default)
set.seed(123)
train <- sample(1000,900)
credit_train <- credit[train,]
credit_test <- credit[-train,]
prop.table(table(credit_train$default))
credit_model <- C5.0(credit_train[-17], credit_train$default)
credit_model
summary(credit_model)
credit_model <- C5.0(credit_train, credit_train$default)
summary(credit_model)
credit_model <- C5.0(credit_train[-17], credit_train$default)
credit_model
summary.C5.0(credit_model)
credit_pred <- predict(credit_model, credit_test)
credit_pred
library(gmodels)
install.packages("gmodels")
library(gmodels)
CrossTable(credit_test$default, credit_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
setwd("~/emoron.github.io/Proyecto Tesis Gabriela/RBrew")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ISOcodes)
install.packages("ISOcodes")
library(ggplot2)
library(ISOcodes)
file <- c("UNdata_Population.csv")
population <- read.csv(file)
names(population) <- c("code", "country", "year",
+     "variant", "value")
